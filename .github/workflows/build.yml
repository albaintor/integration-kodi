# GitHub Action to build a self-contained binary of the Kodi Python driver and Docker images
---
name: "Build & Release"

on:
  push:
    branches: [main]
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  INTG_NAME: kodi
  HASH_FILENAME: uc-src.hash
  # Python version to use in the builder image. See https://hub.docker.com/r/unfoldedcircle/r2-pyinstaller for possible versions.
  PYTHON_VER: 3.11.6-0.2.0
  # Docker configuration
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository_owner }}/kodi-integration

jobs:
  build:
    # using ubuntu-24.04: Package 'qemu' has no installation candidate
    runs-on: ubuntu-22.04
    environment: Ubuntu
    strategy:
      matrix:
        platform: [aarch64, x86_64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # History of 200 should be more than enough to calculate commit count since last release tag.
          fetch-depth: 200

      - name: Fetch all tags to determine version
        run: |
          git fetch origin +refs/tags/*:refs/tags/*
          echo VERSION="v$(jq .version -r driver.json)" >> $GITHUB_ENV
        # echo "VERSION=$(git describe --match "v[0-9]*" --tags HEAD --always)" >> $GITHUB_ENV

      - name: Verify driver.json version for release build
        if: contains(github.ref, 'tags/v')
        run: |
          DRIVER_VERSION="v$(jq .version -r driver.json)"
          if [ "${{ env.VERSION }}" != "$DRIVER_VERSION" ]; then
            echo "Version in driver.json ($DRIVER_VERSION) doesn't match git version tag (${{ env.VERSION }})!"
            exit 1
          fi

      - name: Prepare for aarch64 build
        if: matrix.platform == 'aarch64'
        run: |
          sudo apt-get update && sudo apt-get install -y qemu binfmt-support qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Build for aarch64
        if: matrix.platform == 'aarch64'
        run: |
          echo "Starting pyinstaller build for aarch64"
          docker run --rm --name builder \
            --platform=aarch64 \
            --user=$(id -u):$(id -g) \
            -v ${GITHUB_WORKSPACE}:/workspace \
            docker.io/unfoldedcircle/r2-pyinstaller:${PYTHON_VER} \
            bash -c \
            "cd /workspace && \
              python -m pip install -r requirements.txt && \
              pyinstaller --clean --onedir --name driver src/driver.py"

      - name: Build for x86_64
        if: matrix.platform == 'x86_64'
        run: |
          echo "Starting pyinstaller build for x86_64"
          # Use native x86_64 Python environment
          sudo apt-get update && sudo apt-get install -y python3-pip python3-venv
          python3 -m venv build_env
          source build_env/bin/activate
          pip install -r requirements.txt
          pip install pyinstaller
          pyinstaller --clean --onedir --name driver src/driver.py

      - name: Add version
        run: |
          DRIVER_VERSION="v$(jq .version -r driver.json)"
          mkdir -p artifacts/bin
          cd artifacts
          # echo ${{ env.VERSION }} > version.txt
          echo $DRIVER_VERSION > version.txt
          
      - name: Prepare artifacts
        shell: bash
        run: |
          cp -r dist/driver/* artifacts/bin
          cp driver.json artifacts/
          cp kodi.png artifacts/
          echo "ARTIFACT_NAME=uc-intg-${{ env.INTG_NAME }}-${{ env.VERSION }}-${{ matrix.platform }}" >> $GITHUB_ENV
          
      - name: Create upload artifact
        shell: bash
        run: | 
          tar czvf ${{ env.ARTIFACT_NAME }}.tar.gz -C ${GITHUB_WORKSPACE}/artifacts .
          ls -lah
          
      - uses: actions/upload-artifact@v4
        id: upload_artifact
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar.gz
          if-no-files-found: error
          retention-days: 3

  docker:
    runs-on: ubuntu-latest
    environment: Ubuntu
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Create Release
    if: github.ref == 'refs/heads/main' || contains(github.ref, 'tags/v')
    # using ubuntu-24.04: Package 'qemu' has no installation candidate
    runs-on: ubuntu-22.04
    needs: [build]

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Extract build archives from downloaded files
        run: |
          ls -R
          # extract tar.gz build archives from downloaded artifacts
          # (wrapped in tar from actions/upload-artifact, then extracted into a directory by actions/download-artifact)
          for D in * 
            do if [ -d "${D}" ]; then
              mv $D/* ./
            fi
          done;

      # Use a common timestamp for all matrix build artifacts
      - name: Get timestamp
        run: |
          echo "TIMESTAMP=$(date +"%Y%m%d_%H%M%S")" >> $GITHUB_ENV

      # Add timestamp to development builds
      - name: Create GitHub development build archives
        if: "!contains(github.ref, 'tags/v')"
        run: |
          # append timestamp
          for filename in *.tar.gz; do mv $filename "$(basename $filename .tar.gz)-${{ env.TIMESTAMP }}.tar.gz"; done;
          for filename in *.tar.gz; do echo "sha256  `sha256sum $filename`" >> ${{ env.HASH_FILENAME }}; done;

      - name: Create Pre-Release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: "!contains(github.ref, 'tags/v')"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            *.tar.gz
            ${{ env.HASH_FILENAME }}

      - name: Create GitHub release archives
        if: "contains(github.ref, 'tags/v')"
        run: |
          for filename in *.tar.gz; do echo "sha256  `sha256sum $filename`" >> ${{ env.HASH_FILENAME }}; done;

      - name: Create Release
        uses: "marvinpinto/action-automatic-releases@latest"
        if: "contains(github.ref, 'tags/v')"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            *.tar.gz
            ${{ env.HASH_FILENAME }}
